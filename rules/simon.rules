var Timer partyTimer = null
val String rulesDomaine = "colorscenes.rules"
var Timer rotateTimer = null
val Number timeInBetweenRotations = 10 // in minutes

rule "Aqara Cube event #02"
when
    Channel 'deconz:switch:5c6cc3c3:00158d00048738c3020012:gestureevent' triggered

then
    var actionName = receivedEvent.getEvent()
    switch(actionName) {
        case "5": {
            logInfo("diverses.rules", "Cube #02 MOVE")
            LightstripBettFenster_Farbe.sendCommand(120,100,1)
        }
        case "3": {
            logInfo("test_rule.rules", "Cube #02: Flip 90")
            LightstripBettFenster_Farbe.sendCommand(0,0,0)
        }
        case "4": {
            logInfo("test_rule.rules", "Cube #02: Flip 180")
        }
        case "6": {
            logInfo("test_rule.rules", "Cube #02: Tap Twice")
            LightstripBettFenster_Farbe.sendCommand(120,100,1)
        }
        case "1": {
            logInfo("test_rule.rules", "Cube #02: Shake Air")
        }
        case "2": {
            logInfo("test_rule.rules", "Cube #02: Free Fall")
        }
        case "0": {
            logInfo("test_rule.rules", "Cube #02: Alert")
        }
    }
end
rule "Aqara Cube event #02_x"
when
    Channel 'deconz:switch:5c6cc3c3:00158d00048738c303000c:gestureevent' triggered
then
    var actionName = receivedEvent.getEvent()
    switch(actionName) {
        case "7": {
            logInfo("test_rule.rules", "Cube #02x: Roate right")
          F2_SimonIK.sendCommand(OFF) 
        }
        case "8": {
            logInfo("test_rule.rules", "Cube #02x: Rotate left")
          SimonLampeIkea_Helligkeit.sendCommand(5) 
        }
        case "2": {
            logInfo("test_rule.rules", "Cube #02x: Free Fall")
        }
        case "0": {
            logInfo("test_rule.rules", "Cube #02x: Alert")
        }
    }
end

rule "TRADFRI on/off switch (IK1)"
when
   Channel 'deconz:switch:5c6cc3c3:14b457fffe6f78c2011000:buttonevent' triggered 
then
    var actionName = receivedEvent.getEvent()
     AlarmSimon.sendCommand(OFF)
     
    val autoModeItem     = AlarmSimon as GenericItem
    val autoModeItem2    = hue_0000_0017886beb3c_6_switch as GenericItem  //#  
    val autoModeItem3    = F2_SimonIK as GenericItem
    var TextString       = "TRADFRI on/off switch (IK1)"
    
    switch(actionName) {
        case "1002": {	
            logInfo(TextString, "case 1002, 1 pressed")
            if (autoModeItem.state==ON) { autoModeItem.sendCommand(OFF) }
            if (autoModeItem.state==OFF){ autoModeItem.sendCommand(ON) }
        }
        case "2002": {	
            logInfo(TextString, "case 2002, O pressed")
            if (autoModeItem2.state==ON) { autoModeItem2.sendCommand(OFF) 
                                           autoModeItem3.sendCommand(OFF) 
              }
            if (autoModeItem2.state==OFF) { autoModeItem2.sendCommand(ON)
                                            autoModeItem3.sendCommand(ON) }
        }        
    }  
end




rule "Simon LED Party Mode"
when
    Item Simon_Party_Mode received command ON
then

    partyTimer?.cancel // cancel the timer if one exists for some reason

    val increment = 10
    var currColor = 0
    var currColor1 = 30

    partyTimer = createTimer(now, [ |
        F2_Simon_LS_BettInnen_LED_rgb.sendCommand(currColor+",100,100")
        F2_Simon_LS_BettFenster_LED_rgb.sendCommand(currColor1+",100,100")
        currColor = (currColor + increment) % 360
        currColor1 = (currColor1 + increment) % 360
        partyTimer.reschedule(now.plusMillis(800))
    ])
end

rule "Party mode turned off"
when
    Item Simon_Party_Mode changed from ON to OFF 
then
    partyTimer?.cancel
    F2_Simon_LS_BettInnen_LED_rgb.sendCommand("0,100,100")
    F2_Simon_LS_BettFenster_LED_rgb.sendCommand("0,100,100")
    partyTimer = null
end


